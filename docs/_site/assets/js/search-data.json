{"0": {
    "doc": "Advanced usage",
    "title": "Advanced usage",
    "content": "For basic KSMT usage, please refer to Getting started guide. Having tried the essential scenarios, find the advanced example and proceed to advanced usage. : . | Working with SMT formulas . | Parsing formulas in SMT-LIB2 format | Default simplification | Manual simplification | Expression substitution | . | Working with SMT solvers . | Solver configuration | Solver-independent models | Solver runner | Using custom solvers in a runner | Solver portfolio | . | . ",
    "url": "/pseudoksmt-website/advanced-usage.html",
    
    "relUrl": "/advanced-usage.html"
  },"1": {
    "doc": "Advanced usage",
    "title": "Working with SMT formulas",
    "content": "Learn how to parse, simplify, and substitute expressions. Parsing formulas in SMT-LIB2 format . KSMT provides an API for parsing formulas in the SMT-LIB2 format. Currently, KSMT provides a parser implemented on top of the Z3 solver API, and therefore ksmt-z3 module is required for parsing. val formula = \"\"\" (declare-fun x () Int) (declare-fun y () Int) (assert (&gt;= x y)) (assert (&gt;= y x)) \"\"\" with(ctx) { val assertions = KZ3SMTLibParser().parse(formula) } . Default simplification . By default, KContext attempts to apply lightweight simplifications when you create an expression. If you do not need simplifications, disable them using the KContext.simplificationMode parameter. // Simplification is enabled by default val simplifyingContext = KContext() // Disable simplifications on a context level val nonSimplifyingContext = KContext(simplificationMode = KContext.SimplificationMode.NO_SIMPLIFY) val simplifiedExpr = with(simplifyingContext) { val a by boolSort !(a and falseExpr) } val nonSimplifiedExpr = with(nonSimplifyingContext) { val a by boolSort !(a and falseExpr) } println(nonSimplifiedExpr) // (not (and a false)) println(simplifiedExpr) // true . Manual simplification . KSMT provides KExprSimplifier, so you can manually simplify an arbitrary expression. // Context does not simplify expressions during creation val ctx = KContext(simplificationMode = KContext.SimplificationMode.NO_SIMPLIFY) with(ctx) { val a by boolSort val nonSimplifiedExpr = !(a and falseExpr) val simplifier = KExprSimplifier(ctx) val simplifiedExpr = simplifier.apply(nonSimplifiedExpr) println(nonSimplifiedExpr) // (not (and a false)) println(simplifiedExpr) // true } . Expression substitution . KSMT provides KExprSubstitutor, so you can replace all the expression occurrences with another expression. val a by boolSort val b by boolSort val expr = !(a and b) val substitutor = KExprSubstitutor(this).apply { // Substitute all occurrences of `b` with `false` substitute(b, falseExpr) } val exprAfterSubstitution = substitutor.apply(expr) println(expr) // (not (and a b)) println(exprAfterSubstitution) // true . ",
    "url": "/pseudoksmt-website/advanced-usage.html#working-with-smt-formulas",
    
    "relUrl": "/advanced-usage.html#working-with-smt-formulas"
  },"2": {
    "doc": "Advanced usage",
    "title": "Working with SMT solvers",
    "content": "Learn how to configure and run solvers, get models, and switch to portfolio mode. Solver configuration . KSMT provides an API for modifying solver-specific parameters. Since the parameters and their correct values are solver-specific, KSMT does not perform any checks. See corresponding solver documentation for a list of available options. with(ctx) { KZ3Solver(this).use { solver -&gt; solver.configure { // set Z3 solver `random_seed` parameter to 42 setZ3Option(\"random_seed\", 42) } } } . Solver-independent models . By default, SMT solver models are lazily initialized. The values of the declared variables are loaded from the underlying solver native model on demand. Therefore, models become invalid as soon as the solver closes. Moreover, solvers like Bitwuzla invalidate their models each time check-sat is called. To overcome these problems, KSMT provides the KModel.detach function that allows you to make the model independent of the underlying native representation. val a by boolSort val b by boolSort val expr = a and b val (model, detachedModel) = KZ3Solver(this).use { solver -&gt; solver.assert(expr) println(solver.check()) // SAT val model = solver.model() // Detach model from solver val detachedModel = model.detach() model to detachedModel } try { model.eval(expr) } catch (ex: Exception) { println(\"Model no longer valid after solver close\") } println(detachedModel.eval(expr)) // true . Note: it is recommended to use KModel.detach when you need to keep the model in a List, for example. Solver runner . SMT solvers may ignore timeouts, or they suddenly crash, thus interrupting the entire application process. KSMT provides a process-based solver runner: it runs each solver in a separate process. // Create a long-lived solver manager that manages a pool of solver workers KSolverRunnerManager().use { solverManager -&gt; // Use solver API as usual with(ctx) { val a by boolSort val b by boolSort val expr = a and b // Create solver using manager instead of direct constructor invocation solverManager.createSolver(this, KZ3Solver::class).use { solver -&gt; solver.assert(expr) println(solver.check()) // SAT } } } . Using custom solvers in a runner . Solver runner also supports user-defined solvers. Custom solvers must be registered via registerSolver before being used in the runner. // Create a long-lived solver manager that manages a pool of solver workers KSolverRunnerManager().use { solverManager -&gt; // Register the user-defined solver in a current manager solverManager.registerSolver(CustomZ3BasedSolver::class, KZ3SolverUniversalConfiguration::class) // Use solver API as usual with(ctx) { val a by boolSort val b by boolSort val expr = a and b // Create solver using manager instead of direct constructor invocation solverManager.createSolver(this, CustomZ3BasedSolver::class).use { solver -&gt; solver.assert(expr) println(solver.check()) // SAT } } } . Solver portfolio . To run solvers in portfolio mode, i.e., to run them in parallel until you get the first result, try the following workflow, which is similar to using the solver runner: . // Create a long-lived portfolio solver manager that manages a pool of solver workers KPortfolioSolverManager( // Solvers to include in portfolio listOf(KZ3Solver::class, CustomZ3BasedSolver::class) ).use { solverManager -&gt; // Since we use the user-defined solver in our portfolio, we must register it in the current manager solverManager.registerSolver(CustomZ3BasedSolver::class, KZ3SolverUniversalConfiguration::class) // Use solver API as usual with(ctx) { val a by boolSort val b by boolSort val expr = a and b // Create portfolio solver using manager solverManager.createPortfolioSolver(this).use { solver -&gt; solver.assert(expr) println(solver.check()) // SAT } } } . ",
    "url": "/pseudoksmt-website/advanced-usage.html#working-with-smt-solvers",
    
    "relUrl": "/advanced-usage.html#working-with-smt-solvers"
  },"3": {
    "doc": "Custom expressions",
    "title": "Usage scenario: custom expressions",
    "content": "To extend the KSMT expression system with the user-defined expressions, try custom expression example and follow the instructions below. : . | Defining expressions . | Base expression and transformer | Defining a custom expression | . | Rewriting expressions | Managing expressions | Misc: wrappers | . ",
    "url": "/pseudoksmt-website/custom-expressions.html#usage-scenario-custom-expressions",
    
    "relUrl": "/custom-expressions.html#usage-scenario-custom-expressions"
  },"4": {
    "doc": "Custom expressions",
    "title": "Defining expressions",
    "content": "As an example, we consider the following expression structure: . | CustomExpr — a base expression; | CustomAndExpr — a custom expression that acts like n-ary logical and; | CustomBvAddExpr — a custom expression that acts like n-ary bvadd. | . Base expression and transformer . We must not only define the new custom expression but also define an extended KTransformer, because KSMT transformers are unaware of our custom expressions. interface CustomTransformer : KTransformer { fun transform(expr: CustomAndExpr): KExpr&lt;KBoolSort&gt; fun &lt;T : KBvSort&gt; transform(expr: CustomBvAddExpr&lt;T&gt;): KExpr&lt;T&gt; } . For the base expression, we override the accept function with our CustomTransformer, since all our custom expressions can only be correctly transformed with this transformer. abstract class CustomExpr&lt;T : KSort&gt;(ctx: KContext) : KExpr&lt;T&gt;(ctx) { override fun accept(transformer: KTransformerBase): KExpr&lt;T&gt; { /** * Since KSMT transformers are unaware of our custom expressions * we must use our own extended transformer. * * Note: it is a good idea to throw an exception when our * custom expression is visited by the other transformer, * because this usually means that our custom expression * has leaked into the KSMT core and will be processed incorrectly. * */ transformer as? CustomTransformer ?: error(\"Leaked custom expression\") return accept(transformer) } abstract fun accept(transformer: CustomTransformer): KExpr&lt;T&gt; } . Defining a custom expression . Important notes on defining custom expressions are provided as comments in the examples. See Managing expressions for details about equals, hashCode, internEquals, and internHashCode. class CustomAndExpr( val args: List&lt;KExpr&lt;KBoolSort&gt;&gt;, ctx: KContext ) : CustomExpr&lt;KBoolSort&gt;(ctx) { override val sort: KBoolSort get() = ctx.boolSort /** * Expression printer, suitable for deeply nested expressions. * Mainly used in `toString`. * */ override fun print(printer: ExpressionPrinter) { printer.append(\"(customAnd\") args.forEach { printer.append(\" \") /** * Note the use of `append` with `KExpr` argument. * */ printer.append(it) } printer.append(\")\") } /** * Analogues of `equals` and `hashCode`. * */ override fun internHashCode(): Int = hash(args) /** * Note the `structurallyEqual` utility checking * if types are the same and all the fields specified in `{ }` are equal. * */ override fun internEquals(other: Any): Boolean = structurallyEqual(other) { args } /** * The expression is visited by the transformer. * Normally, we invoke the corresponding `transform` * method of the transformer and return the invocation result. * * It is usually a bad idea to return something without `transform` * invocation, or to invoke `transform` on some other expression. * It is better to perform any expression transformation with the * corresponding transformer. * */ override fun accept(transformer: CustomTransformer): KExpr&lt;KBoolSort&gt; = transformer.transform(this) } . The definition of CustomBvAddExpr is actually the same as for CustomAndExpr. class CustomBvAddExpr&lt;T : KBvSort&gt;( val args: List&lt;KExpr&lt;T&gt;&gt;, ctx: KContext ) : CustomExpr&lt;T&gt;(ctx) { /** * The sort of this expression is parametric and * depends on the sorts of arguments. * */ override val sort: T by lazy { args.first().sort } override fun print(printer: ExpressionPrinter) { printer.append(\"(customBvAdd\") args.forEach { printer.append(\" \") printer.append(it) } printer.append(\")\") } override fun internHashCode(): Int = hash(args) override fun internEquals(other: Any): Boolean = structurallyEqual(other) { args } override fun accept(transformer: CustomTransformer): KExpr&lt;T&gt; = transformer.transform(this) } . ",
    "url": "/pseudoksmt-website/custom-expressions.html#defining-expressions",
    
    "relUrl": "/custom-expressions.html#defining-expressions"
  },"5": {
    "doc": "Custom expressions",
    "title": "Rewriting expressions",
    "content": "Since KSMT is unaware of custom expressions, we must ensure that the expressions to be processed by the KSMT facilities do not contain custom parts. Regarding this, we define a transformer for the custom expressions that rewrites them with the appropriate KSMT expressions. class CustomExprRewriter( override val ctx: KContext ) : KNonRecursiveTransformer(ctx), CustomTransformer { /** * Here we use `transformExprAfterTransformed` function of `KNonRecursiveTransformer` * that implements bottom-up transformation (transform arguments first). * */ override fun &lt;T : KBvSort&gt; transform(expr: CustomBvAddExpr&lt;T&gt;): KExpr&lt;T&gt; = transformExprAfterTransformed(expr, expr.args) { transformedArgs -&gt; transformedArgs.reduce { acc, e -&gt; ctx.mkBvAddExpr(acc, e) } } override fun transform(expr: CustomAndExpr): KExpr&lt;KBoolSort&gt; = transformExprAfterTransformed(expr, expr.args) { transformedArgs -&gt; ctx.mkAnd(transformedArgs) } } . Note the KNonRecursiveTransformer that allows transformation of deeply nested expressions without recursion. ",
    "url": "/pseudoksmt-website/custom-expressions.html#rewriting-expressions",
    
    "relUrl": "/custom-expressions.html#rewriting-expressions"
  },"6": {
    "doc": "Custom expressions",
    "title": "Managing expressions",
    "content": "In KSMT, we use expression interning and guarantee that two of equal expressions are equal by reference (i.e., are the same object). We use internEquals and internHashCode to replace equals and hashCode, and we use reference equality for the equals method. To apply interning for custom expressions, you need to create an interner and ensure that it manages all the created expressions. For this purpose, it is convenient to define an extended context that manages all custom expressions. class CustomContext : KContext() { // Interners for custom expressions. private val customAndInterner = mkAstInterner&lt;CustomAndExpr&gt;() private val customBvInterner = mkAstInterner&lt;CustomBvAddExpr&lt;*&gt;&gt;() // Expression builder that performs interning of a created expression fun mkCustomAnd(args: List&lt;KExpr&lt;KBoolSort&gt;&gt;): CustomAndExpr = customAndInterner.createIfContextActive { CustomAndExpr(args, this) } fun &lt;T : KBvSort&gt; mkCustomBvAdd(args: List&lt;KExpr&lt;T&gt;&gt;): CustomBvAddExpr&lt;T&gt; = customBvInterner.createIfContextActive { CustomBvAddExpr(args, this) }.uncheckedCast() // Unchecked cast is used here because 'customBvInterner' has erased sort. } . ",
    "url": "/pseudoksmt-website/custom-expressions.html#managing-expressions",
    
    "relUrl": "/custom-expressions.html#managing-expressions"
  },"7": {
    "doc": "Custom expressions",
    "title": "Misc: wrappers",
    "content": "Since it is required to eliminate all the custom expressions before interacting with any KSMT feature, it is convenient to create wrappers. For example, we can wrap KSolver and eliminate custom expressions on each query. class CustomSolver&lt;C : KSolverConfiguration&gt;( private val solver: KSolver&lt;C&gt;, private val transformer: CustomExprRewriter ) : KSolver&lt;C&gt; { // `expr` can contain custom expressions -&gt; rewrite override fun assert(expr: KExpr&lt;KBoolSort&gt;) = solver.assert(transformer.apply(expr)) // `expr` can contain custom expressions -&gt; rewrite override fun assertAndTrack(expr: KExpr&lt;KBoolSort&gt;) = solver.assertAndTrack(transformer.apply(expr)) // `assumptions` can contain custom expressions -&gt; rewrite override fun checkWithAssumptions(assumptions: List&lt;KExpr&lt;KBoolSort&gt;&gt;, timeout: Duration): KSolverStatus = solver.checkWithAssumptions(assumptions.map { transformer.apply(it) }, timeout) // wrap model for correct `eval` method handling override fun model(): KModel = CustomModel(solver.model(), transformer) // Other methods do not suffer from custom expressions override fun check(timeout: Duration): KSolverStatus = solver.check(timeout) override fun pop(n: UInt) = solver.pop(n) override fun push() = solver.push() override fun reasonOfUnknown(): String = solver.reasonOfUnknown() override fun unsatCore(): List&lt;KExpr&lt;KBoolSort&gt;&gt; = solver.unsatCore() override fun close() = solver.close() override fun configure(configurator: C.() -&gt; Unit) = solver.configure(configurator) override fun interrupt() = solver.interrupt() } . We can wrap KModel and eliminate custom expressions before eval. class CustomModel( private val model: KModel, private val transformer: CustomExprRewriter ) : KModel { // `expr` can contain custom expressions -&gt; rewrite override fun &lt;T : KSort&gt; eval(expr: KExpr&lt;T&gt;, isComplete: Boolean): KExpr&lt;T&gt; = model.eval(transformer.apply(expr), isComplete) // Other methods do not suffer from custom expressions override val declarations: Set&lt;KDecl&lt;*&gt;&gt; get() = model.declarations override val uninterpretedSorts: Set&lt;KUninterpretedSort&gt; get() = model.uninterpretedSorts override fun &lt;T : KSort&gt; interpretation(decl: KDecl&lt;T&gt;): KFuncInterp&lt;T&gt;? = model.interpretation(decl) override fun uninterpretedSortUniverse(sort: KUninterpretedSort): Set&lt;KUninterpretedSortValue&gt;? = model.uninterpretedSortUniverse(sort) override fun detach(): KModel = CustomModel(model.detach(), transformer) } . ",
    "url": "/pseudoksmt-website/custom-expressions.html#misc-wrappers",
    
    "relUrl": "/custom-expressions.html#misc-wrappers"
  },"8": {
    "doc": "Custom expressions",
    "title": "Custom expressions",
    "content": " ",
    "url": "/pseudoksmt-website/custom-expressions.html",
    
    "relUrl": "/custom-expressions.html"
  },"9": {
    "doc": "Getting started",
    "title": "Getting started",
    "content": "For your first steps with KSMT, try our code examples. To check OS compatibility, see Supported solvers and theories. : . | Installation | Usage . | Working with SMT formulas | Working with SMT solvers | Incremental solving: API . | Incremental solving with push/pop operations | Incremental solving with assumptions | . | Solver unsatisfiable cores | . | . ",
    "url": "/pseudoksmt-website/getting-started.html",
    
    "relUrl": "/getting-started.html"
  },"10": {
    "doc": "Getting started",
    "title": "Installation",
    "content": "Install KSMT via Gradle. 1. Enable Maven Central repository in your build configuration: . repositories { mavenCentral() } . 2. Add KSMT core dependency: . dependencies { // core implementation(\"io.ksmt:ksmt-core:0.5.3\") } . 3. Add one or more SMT solver dependencies: . dependencies { // z3 implementation(\"io.ksmt:ksmt-z3:0.5.3\") // bitwuzla implementation(\"io.ksmt:ksmt-bitwuzla:0.5.3\") } . SMT solver specific packages are provided with solver native binaries. ",
    "url": "/pseudoksmt-website/getting-started.html#installation",
    
    "relUrl": "/getting-started.html#installation"
  },"11": {
    "doc": "Getting started",
    "title": "Usage",
    "content": "Create a KSMT context that manages expressions and solvers: . val ctx = KContext() . Working with SMT formulas . Once the context is initialized, you can create expressions. In the example below, we create an expression . a &amp;&amp; (b &gt;= c + 3) . over Boolean variable a and integer variables b and c: . import io.ksmt.utils.getValue with(ctx) { // create symbolic variables val a by boolSort val b by intSort val c by intSort // create an expression val constraint = a and (b ge c + 3.expr) } . KSMT expressions are typed, and incorrect terms (e.g., and with integer arguments) result in a compile-time error. Note: import getValue is required when using the by keyword. Alternatively, use mkConst(name, sort). Working with SMT solvers . To check SMT formula satisfiability, we need to instantiate an SMT solver. In this example, we use constraint from the previous step as an SMT formula. We use Z3 as an SMT solver. with(ctx) { KZ3Solver(this).use { solver -&gt; // create a Z3 SMT solver instance // assert expression solver.assert(constraint) // check assertions satisfiability with timeout val satisfiability = solver.check(timeout = 1.seconds) println(satisfiability) // SAT // obtain model val model = solver.model() println(\"$a = ${model.eval(a)}\") // a = true println(\"$b = ${model.eval(b)}\") // b = 0 println(\"$c = ${model.eval(c)}\") // c = -3 } } . The formula in the example above is satisfiable, so we can get a model. The model contains concrete values of the symbolic variables a, b, and c, which evaluate the formula to true. Note: the Kotlin .use { } construction allows releasing the solver-consumed resources. Incremental solving: API . KSMT solver API provides two approaches to incremental formula solving: using push/pop operations and using assumptions. Incremental solving with push/pop operations . Push and pop operations in the solver allow us to work with assertions as if we deal with a stack. The push operation puts the asserted expressions onto the stack, while the pop operation removes the pushed assertions. with(ctx) { // create symbolic variables val cond1 by boolSort val cond2 by boolSort val a by bv32Sort val b by bv32Sort val c by bv32Sort val goal by bv32Sort KZ3Solver(this).use { solver -&gt; // a == 0 solver.assert(a eq mkBv(value = 0)) // goal == 2 solver.assert(goal eq mkBv(value = 2)) // push assertions onto stack solver.push() // a == goal solver.assert(a eq goal) /** * Formula is unsatisfiable because we have * a == 0 &amp;&amp; goal == 2 &amp;&amp; a == goal */ val check0 = solver.check(timeout = 1.seconds) println(\"check0 = $check0\") // UNSAT // pop assertions from stack; a == goal is removed solver.pop() /** * Formula is satisfiable now because we have * a == 0 &amp;&amp; goal == 2 */ val check1 = solver.check(timeout = 1.seconds) println(\"check1 = $check1\") // SAT // b == if (cond1) a + 1 else a solver.assert(b eq mkIte(cond1, mkBvAddExpr(a, mkBv(value = 1)), a)) // push assertions onto stack solver.push() // b == goal solver.assert(b eq goal) /** * Formula is unsatisfiable because we have * a == 0 &amp;&amp; goal == 2 * &amp;&amp; b == if (cond1) a + 1 else a * &amp;&amp; goal == b * where all possible values for b are only 0 and 1 */ val check2 = solver.check(timeout = 1.seconds) println(\"check2 = $check2\") // UNSAT // pop assertions from stack. b == goal is removed solver.pop() /** * Formula is satisfiable now because we have * a == 0 &amp;&amp; goal == 2 * &amp;&amp; b == if (cond1) a + 1 else a */ val check3 = solver.check(timeout = 1.seconds) println(\"check3 = $check3\") // SAT // c == if (cond2) b + 1 else b solver.assert(c eq mkIte(cond2, mkBvAddExpr(b, mkBv(value = 1)), b)) // push assertions stack solver.push() // c == goal solver.assert(c eq goal) /** * Formula is satisfiable because we have * a == 0 &amp;&amp; goal == 2 * &amp;&amp; b == if (cond1) a + 1 else a * &amp;&amp; c == if (cond2) b + 1 else b * &amp;&amp; goal == c * where all possible values for b are 0 and 1 * and for c we have 0, 1 and 2 */ val check4 = solver.check(timeout = 1.seconds) println(\"check4 = $check4\") // SAT } } . Incremental solving with assumptions . Assumption mechanism allows us to assert an expression for a single check without actually adding it to assertions. The following example shows how to implement the previous example using assumptions instead of push and pop operations. with(ctx) { // create symbolic variables val cond1 by boolSort val cond2 by boolSort val a by bv32Sort val b by bv32Sort val c by bv32Sort val goal by bv32Sort KZ3Solver(this).use { solver -&gt; // a == 0 solver.assert(a eq mkBv(value = 0)) // goal == 2 solver.assert(goal eq mkBv(value = 2)) /** * Formula is unsatisfiable because we have * a == 0 &amp;&amp; goal == 2 &amp;&amp; a == goal * Expression a == goal is assumed for current check */ val check0 = solver.checkWithAssumptions( assumptions = listOf(a eq goal), timeout = 1.seconds ) println(\"check0 = $check0\") // UNSAT /** * Formula is satisfiable because we have * a == 0 &amp;&amp; goal == 2 */ val check1 = solver.check(timeout = 1.seconds) println(\"check1 = $check1\") // SAT // b == if (cond1) a + 1 else a solver.assert(b eq mkIte(cond1, mkBvAddExpr(a, mkBv(value = 1)), a)) /** * Formula is unsatisfiable because we have * a == 0 &amp;&amp; goal == 2 * &amp;&amp; b == if (cond1) a + 1 else a * &amp;&amp; goal == b * where all possible values for b are only 0 and 1 * Expression goal == b is assumed for current check */ val check2 = solver.checkWithAssumptions( assumptions = listOf(b eq goal), timeout = 1.seconds ) println(\"check2 = $check2\") // UNSAT /** * Formula is satisfiable now because we have * a == 0 &amp;&amp; goal == 2 * &amp;&amp; b == if (cond1) a + 1 else a */ val check3 = solver.check(timeout = 1.seconds) println(\"check3 = $check3\") // SAT // c == if (cond2) b + 1 else b solver.assert(c eq mkIte(cond2, mkBvAddExpr(b, mkBv(value = 1)), b)) /** * Formula is satisfiable because we have * a == 0 &amp;&amp; goal == 2 * &amp;&amp; b == if (cond1) a + 1 else a * &amp;&amp; c == if (cond2) b + 1 else b * &amp;&amp; goal == c * where all possible values for b are 0 and 1 * and for c we have 0, 1 and 2 * Expression goal == c is assumed for current check */ val check4 = solver.checkWithAssumptions( assumptions = listOf(c eq goal), timeout = 1.seconds ) println(\"check4 = $check4\") // SAT } } . Solver unsatisfiable cores . If the asserted SMT formula is unsatisfiable, we can extract the unsatisfiable core. The unsatisfiable core is a subset of inconsistent assertions and assumptions. with(ctx) { // create symbolic variables val a by boolSort val b by boolSort val c by boolSort val e1 = (a and b) or c val e2 = !(a and b) val e3 = !c KZ3Solver(this).use { solver -&gt; // simply assert e1 solver.assert(e1) /** * Assert and track e2 * e2 will appear in unsat core * */ solver.assertAndTrack(e2) /** * Check satisfiability with e3 assumed. * Formula is unsatisfiable because e1 is inconsistent with e2 and e3 * */ val check = solver.checkWithAssumptions(assumptions = listOf(e3)) println(\"check = $check\") // retrieve unsat core val core = solver.unsatCore() println(\"unsat core = $core\") // [(not (and b a)), (not c)] // simply asserted expression cannot be in unsat core println(\"e1 in core = ${e1 in core}\") // false // an expression added with `assertAndTrack` appears in unsat core as is println(\"e2 in core = ${e2 in core}\") // true // the assumed expression appears in unsat core as is println(\"e3 in core = ${e3 in core}\") // true } } . ",
    "url": "/pseudoksmt-website/getting-started.html#usage",
    
    "relUrl": "/getting-started.html#usage"
  },"12": {
    "doc": "API reference",
    "title": "ksmt-core",
    "content": " ",
    "url": "/pseudoksmt-website/api/",
    
    "relUrl": "/api/"
  },"13": {
    "doc": "API reference",
    "title": "Packages",
    "content": "io.ksmt Link copied to clipboard io.ksmt.cache Link copied to clipboard io.ksmt.cache.weak Link copied to clipboard io.ksmt.decl Link copied to clipboard io.ksmt.expr Link copied to clipboard io.ksmt.expr.printer Link copied to clipboard io.ksmt.expr.rewrite Link copied to clipboard io.ksmt.expr.rewrite.simplify Link copied to clipboard io.ksmt.expr.transformer Link copied to clipboard io.ksmt.parser Link copied to clipboard io.ksmt.solver Link copied to clipboard io.ksmt.solver.model Link copied to clipboard io.ksmt.solver.util Link copied to clipboard io.ksmt.sort Link copied to clipboard io.ksmt.utils Link copied to clipboard © 2023 CopyrightGenerated by dokka . ",
    "url": "/pseudoksmt-website/api/",
    
    "relUrl": "/api/"
  },"14": {
    "doc": "API reference",
    "title": "API reference",
    "content": "ksmt-core | | | . ksmt-core 0.5.3 ",
    "url": "/pseudoksmt-website/api/",
    
    "relUrl": "/api/"
  },"15": {
    "doc": "Overview",
    "title": "Kotlin API for various SMT solvers",
    "content": ". Get the most out of SMT solving with the unified Kotlin/Java API: . | Supporting more solvers and theories — for all popular operating systems | Solver-agnostic formula representation and easy-to-use DSL | Utilities to simplify and transform your expressions | Switching between solvers and support for portfolio mode | Running solvers in a separate process to reduce timeout-related crashes | Streamlined solver delivery with no need for building a solver or implementing JVM bindings | . ",
    "url": "/pseudoksmt-website/#kotlin-api-for-various-smt-solvers",
    
    "relUrl": "/#kotlin-api-for-various-smt-solvers"
  },"16": {
    "doc": "Overview",
    "title": "Quick start",
    "content": "To start using KSMT, install it via Gradle: . // core implementation(\"io.ksmt:ksmt-core:0.5.3\") // z3 solver implementation(\"io.ksmt:ksmt-z3:0.5.3\") . Find basic instructions in the Getting started guide and try it out with the Kotlin or Java examples. To go beyond the basic scenarios, proceed to the Advanced usage guide and try the advanced example. To get guided experience in KSMT, step through the detailed scenario for creating custom expressions. Check the Roadmap to know more about current feature support and plans for the nearest future. ",
    "url": "/pseudoksmt-website/#quick-start",
    
    "relUrl": "/#quick-start"
  },"17": {
    "doc": "Overview",
    "title": "Supported solvers and theories",
    "content": "KSMT provides support for various solvers: . | SMT solver | Linux-x64 | Windows-x64 | macOS-aarch64 | macOS-x64 | . | Z3 | ✔ | ✔ | ✔ | ✔ | . | Bitwuzla | ✔ | ✔ | ✔ |   | . | Yices2 | ✔ | ✔ | ✔ |   | . | cvc5 | ✔ | ✔ | ✔ |   | . You can also use SMT solvers across multiple theories: . | Theory | Z3 | Bitwuzla | Yices2 | cvc5 | . | Bitvectors | ✔ | ✔ | ✔ | ✔ | . | Arrays | ✔ | ✔ | ✔ | ✔ | . | IEEE Floats | ✔ | ✔ |   | ✔ | . | Uninterpreted Functions | ✔ | ✔ | ✔ | ✔ | . | Arithmetic | ✔ |   | ✔ | ✔ | . ",
    "url": "/pseudoksmt-website/#supported-solvers-and-theories",
    
    "relUrl": "/#supported-solvers-and-theories"
  },"18": {
    "doc": "Overview",
    "title": "Solver-agnostic formula representation",
    "content": "Various scenarios are available for using SMT solvers: you can use a single solver to determine whether a formula is satisfiable, or you can apply several solvers to the same expression successively. In the latter case, you need a solver-agnostic formula representation. We implemented it in KSMT, so you can . | transform expressions from the solver native representation to KSMT representation and vice versa, | use formula introspection, | manipulate expressions without involving a solver, | use expressions even if the solver is freed. | . Expression interning (hash consing) affords faster expression comparison: we do not need to compare the expression trees. Expressions are deduplicated, so we avoid redundant memory allocation. ",
    "url": "/pseudoksmt-website/#solver-agnostic-formula-representation",
    
    "relUrl": "/#solver-agnostic-formula-representation"
  },"19": {
    "doc": "Overview",
    "title": "Kotlin-based DSL for SMT formulas",
    "content": "KSMT provides you with a unified DSL for SMT expressions: . val array by mkArraySort(intSort, intSort) val index by intSort val value by intSort val expr = (array.select(index - 1.expr) lt value) and (array.select(index + 1.expr) gt value) . ",
    "url": "/pseudoksmt-website/#kotlin-based-dsl-for-smt-formulas",
    
    "relUrl": "/#kotlin-based-dsl-for-smt-formulas"
  },"20": {
    "doc": "Overview",
    "title": "Utilities to simplify and transform expressions",
    "content": "KSMT provides a simplification engine applicable to all supported expressions for all supported theories: . | reduce expression size and complexity | evaluate expressions (including those with free variables) — reduce your expression to a constant | perform formula transformations | substitute expressions | . KSMT simplification engine implements more than 200 rules. By default, it attempts to apply simplifications when you create the expressions, but you can turn this feature off, if necessary. You can also simplify an arbitrary expression manually. ",
    "url": "/pseudoksmt-website/#utilities-to-simplify-and-transform-expressions",
    
    "relUrl": "/#utilities-to-simplify-and-transform-expressions"
  },"21": {
    "doc": "Overview",
    "title": "Using multiple solvers (portfolio mode)",
    "content": "SMT solvers may differ in performance across different formulas: see the International Satisfiability Modulo Theories Competition. With KSMT portfolio solving, you can run multiple solvers in parallel on the same formula — until you get the first (the fastest) result. For detailed instructions on running multiple solvers, see Advanced usage. ",
    "url": "/pseudoksmt-website/#using-multiple-solvers-portfolio-mode",
    
    "relUrl": "/#using-multiple-solvers-portfolio-mode"
  },"22": {
    "doc": "Overview",
    "title": "Running solvers in a separate processes",
    "content": "Most of the SMT solvers are research projects — they are implemented via native libraries and are sometimes not production ready: . | they may ignore timeouts — they sometimes hang in a long-running operation, and you cannot interrupt it; | they may suddenly crash interrupting the entire process — because of a pointer issue, for example. | . KSMT runs each solver in a separate process, which adds to stability of your application and provides support for portfolio mode. ",
    "url": "/pseudoksmt-website/#running-solvers-in-a-separate-processes",
    
    "relUrl": "/#running-solvers-in-a-separate-processes"
  },"23": {
    "doc": "Overview",
    "title": "KSMT distribution",
    "content": "Many solvers do not have prebuilt binaries, or binaries are for Linux only. KSMT is distributed as JVM library with solver binaries provided. The library has been tested against the SMT-LIB benchmarks. Documentation and examples are also available. ",
    "url": "/pseudoksmt-website/#ksmt-distribution",
    
    "relUrl": "/#ksmt-distribution"
  },"24": {
    "doc": "Overview",
    "title": "Overview",
    "content": " ",
    "url": "/pseudoksmt-website/",
    
    "relUrl": "/"
  }
}
